# (mostly) project-independent Makefile fragment for Linux

CFLAGS = -MMD -Wall -Wshadow -Werror=return-type
CXX = g++
CXXFLAGS = --std=c++14 -fno-rtti -fno-exceptions
CC = gcc
CCFLAGS = --std=c99 -Werror=implicit-function-declaration -Werror=int-conversion
LD = g++
LDFLAGS =

DEBUG ?= 0
ifneq ($(DEBUG), 0)
  CFLAGS += -g
  BUILDDIR = Debug
else
  CFLAGS += -O2 -march=native -DNDEBUG
  BUILDDIR = Release
endif

SANITIZE ?= 0
ifneq ($(SANITIZE), 0)
  CFLAGS += -fsanitize=address -fsanitize=undefined -fsanitize=float-divide-by-zero
  LDFLAGS += -lasan -lubsan
endif

# disable optimizations which make profiling difficult, esp. inlining; frame pointer needed for sampling
PROFILE ?= 0
ifneq ($(PROFILE), 0)
  CFLAGS += -fno-omit-frame-pointer -g
  LDFLAGS += -rdynamic
endif

# project independent stuff
# pkg-config headers and libraries
ifneq ($(PKGS),)
  CFLAGS += $(shell pkg-config --cflags $(PKGS))
  LIBS += $(shell pkg-config --libs $(PKGS))
endif

ifneq ($(TOPDIR),)
  OBJDIR=$(BUILDDIR)/$(TOPDIR)
else
  OBJDIR=$(BUILDDIR)
endif

# include files
INCFLAGS = $(INC:%=-I%) $(INCSYS:%=-isystem%)

# defines
CFLAGS += $(DEFS:%=-D%)

SRCBASE=$(basename $(SOURCES))
OBJ=$(SRCBASE:%=$(OBJDIR)/%.o)
DEPS=$(SRCBASE:%=$(OBJDIR)/%.d)
TGT=$(BUILDDIR)/$(TARGET)
# gcc will not create directories, so depend on existence of all directories in output folder
# sort removes duplicates (which cause make error)
BUILDDIRS=$(sort $(dir $(OBJ)))

.PHONY: all clean distclean

all: $(TGT)

$(OBJDIR)/%.o: %.cpp
	$(CXX) -c $(CFLAGS) $(CXXFLAGS) $(INCFLAGS) -o $@ $<

$(OBJDIR)/%.o: %.c
	$(CC) -c $(CFLAGS) $(CCFLAGS) $(INCFLAGS) -o $@ $<

$(TGT): $(OBJ)
	$(LD) -o $@ $^ $(LDFLAGS) $(LIBS)

# | (pipe) operator causes make to just check for existence instead of timestamp
$(OBJ): | $(BUILDDIRS)

$(BUILDDIRS):
	mkdir -p $(BUILDDIRS)

clean:
	rm -f $(TGT) $(OBJ) $(DEPS)

distclean:
	rm -rf ./Debug ./Release

sourcelist:
	@printf '%s\n' $(SOURCES)

# dependency files generated by gcc (-MMD switch) ("-include" ignores file if missing)
-include $(DEPS)
